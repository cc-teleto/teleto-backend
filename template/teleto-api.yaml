---
swagger: "2.0"
info:
  version: "2020-11-25T06:06:04Z"
  title: "teleto API"
basePath:
  Fn::Sub: ${ApiStage}
schemes:
  - "https"
paths:
  /members:
    get:
      produces:
        - "application/json"
        - "application/json(全取得)"
      parameters:
        - name: "grouphash"
          in: "query"
          required: false
          type: "string"
        - name: "random"
          in: "query"
          required: false
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/getAllMembers"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMembersLambda.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
        credentials:
          Fn::Sub: "${apiRole.Arn}"
    post:
      produces:
        - "application/json"
      parameters:
        - name: "grouphash"
          in: "query"
          required: false
          type: "string"
      responses:
        201:
          description: "201 response"
          schema:
            $ref: "#/definitions/postMembers"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        402:
          description: "402 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostMembersLambda.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
        credentials:
          Fn::Sub: "${apiRole.Arn}"
    delete:
      produces:
        - "application/json"
      parameters:
        - name: "memberhash"
          in: "query"
          required: false
          type: "string"
        - name: "grouphash"
          in: "query"
          required: false
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/deleteMember"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
        402:
          description: "402 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteMembersLambda.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
        credentials:
          Fn::Sub: "${apiRole.Arn}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
  /topics:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "category"
          in: "query"
          required: false
          type: "string"
        - name: "grouphash"
          in: "query"
          required: false
          type: "string"
        - name: "random"
          in: "query"
          required: false
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/getTopics"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTopicsLambda.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
        credentials:
          Fn::Sub: "${apiRole.Arn}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"

  /roulette:
    get:
      produces:
        - "application/json"
        - "application/json(全取得)"
      parameters:
        - name: "grouphash"
          in: "query"
          required: false
          type: "string"
        - name: "random"
          in: "query"
          required: false
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/getAllMembers"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetMembersLambda.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
        credentials:
          Fn::Sub: "${apiRole.Arn}"
  /room:
    get:
      produces:
        - "application/json"
        - "application/json(全取得)"
      parameters:
        - name: "grouphash"
          in: "query"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/getRoom"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoomLambda.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
        credentials:
          Fn::Sub: "${apiRole.Arn}"  
    post:
      produces:
        - "application/json"
      parameters:
        - name: "members"
          in: "query"
          required: true
          type: "array"
        - name: "endPeriod"
          in: "query"
          required: true
          type: "string"
        - name: "category"
          in: "query"
          required: true
          type: "string"
      responses:
        201:
          description: "201 response"
          schema:
            $ref: "#/definitions/postRoom"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        401:
          description: "401 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        402:
          description: "402 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostRoomLambda.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
        credentials:
          Fn::Sub: "${apiRole.Arn}"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
  getTopics:
    type: "object"
    properties:
      value:
        type: "string"
    title: "getTopicsModel"
  getAllMembers:
    type: "object"
    properties:
      members:
        type: "array"
        items:
          type: "object"
          properties:
            grouphash:
              type: "string"
            memberhash:
              type: "string"
            membername:
              type: "string"
    title: "getAllMembersModel"
  deleteMember:
    type: "object"
    properties:
      memberhash:
        type: "string"
    title: "grouphashModel"
  postMembers:
    type: "object"
    properties:
      grouphash:
        type: "string"
    title: "postMembersModel"
  getMembers:
    type: "object"
    properties:
      value:
        type: "string"
    title: "getMembersModel"
  getRoom:
    type: "object"
    properties:
      grouphash:
        type: "string"
      endPeriod:
        type: "string"
      category:
        type: "string"
      selectedTalker:
        type: "string"
      selectedTopic:
        type: "string"
      rouletteStatus:
        type: "string"
      rouletteStopAt:
        type: "number"
      onWhichScreen:
        type: "string"
    title: "getRoomProperty"
  postRoom:
    type: "object"
    properties:
      grouphash:
        type: "string"
    title: "postRoomModel"
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
